<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--
'* Project: CmisObjectModelLibrary
'* Copyright (c) 2014, Brügmann Software GmbH, Papenburg, All rights reserved
'*
'* Contact: opensource<at>patorg.de
'* 
'* CmisObjectModelLibrary is a VB.NET implementation of the Content Management Interoperability Services (CMIS) standard
'*
'* This file is part of CmisObjectModelLibrary.
'* 
'* This library is free software; you can redistribute it and/or
'* modify it under the terms of the GNU Lesser General Public
'* License as published by the Free Software Foundation; either
'* version 3.0 of the License, or (at your option) any later version.
'*
'* This library is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'* Lesser General Public License for more details.
'*
'* You should have received a copy of the GNU Lesser General Public
'* License along with this library (lgpl.txt).
'* If not, see <http://www.gnu.org/licenses/lgpl.txt>.
-->
<html>
	<head>
		<title>EmbeddedFrame</title>
	</head>
	<body>
	<script charset="utf-8" language="javascript" type="text/javascript">
	    "use strict";
	    var hostingApplicationInfo = getHostingApplicationInfo();
	    var hostingApplicationDomain = hostingApplicationInfo[0];
	    var hostingApplicationPath = hostingApplicationInfo[1];
	    var loginUri = 'a00ca801b5714a2989b001a3ad924c53';

	    //install eventListener if page is used as a frame within main page
	    if (window.top != window.self && hostingApplicationDomain != null && hostingApplicationPath != null) {
	        window.addEventListener('message', eventListener, false);
	    }

	    /*
	    Adds a query expression to given uri
        */
	    function addQuery(uri, queryExpression) {
	        if (queryExpression != '')
	            uri = uri + ((uri.indexOf('?') == -1) ? '?' : '&') + queryExpression;
	        return uri;
        }

	    /*
        Event-listener for this page as a frame within the mainPage of the hosting application
	    */
	    function eventListener(e) {
	        //provide only messages from the main page
	        if (e.origin != hostingApplicationDomain)
	            return;
	        if (e.data.substring(0, 6) == 'login:') {
	            var queryString = e.data.substring(6);
	            login(e, queryString);
	        }
	        else if (e.data.substring(0, 7) == 'logout:') {
	            var queryString = e.data.substring(7);
	            logout(e, queryString);
	        }
	    }

	    /*
        Extract expected parameters from querystring
	    */
	    function getHostingApplicationInfo() {
	        var domain = null;
	        var path = null;
	        var currentHRef = window.location.href;
	        var params = currentHRef.slice(currentHRef.indexOf('?') + 1).split('&');

	        for (var i = 0; i < params.length; i++) {
	            var keyValuePair = params[i].split('=');
	            if (keyValuePair[0] == 'domain')
	                domain = decodeURIComponent(keyValuePair[1]);
	            else if (keyValuePair[0] == 'path')
	                path = decodeURIComponent(keyValuePair[1]);
	        }

	        return [domain, path];
	    }

	    /*
	    try to log in into repository using querystring
        */
	    function login(e, queryString) {
	        var hostingApplicationUri = "hostingApplicationUri" + encodeURIComponent(hostingApplicationDomain + hostingApplicationPath)
	        $.ajax({
	            url: addQuery(addQuery(loginUri, queryString), hostingApplicationUri),
	            type: 'POST',
	            dataType: 'application/json',
	            success: function (data) {
	                if (data.ok == 1) {
	                    //successful logged in
	                    var message = 'loggedIn:repositoryId=' + encodeURIComponent(data.repositoryId) +
                                      '&sessionId=' + encodeURIComponent(data.sessionId) +
                                      '&authorization=' + encodeURIComponent(data.authorization);
	                    e.source.postMessage(message, e.origin);
	                }
	                else {
	                    //couldn't log in in silent mode; redirect to login page
	                    var loginKey = 'repositoryId=' + encodeURIComponent(data.repositoryId) +
                                       '&user=' + encodeURIComponent(data.user);
	                    var parameters = { loginKey: loginKey, loginUri: addQuery(loginUri,
                                                                                  'cmisaction=login' +
                                                                                  '&accepts=' + encodeURIComponent('text/html') +
                                                                                  '&' + hostingApplicationUri + 
                                                                                  '&' + loginKey)
	                    };
	                    var message = 'redirect:' + JSON.stringify(parameters);
	                    e.source.postMessage(message, e.origin);
	                }
	            },
	            error: function (msg) { alert('Error: ' + msg) }
	        });
	    }

	    /*
	    log out from repository
        */
	    function logout(e, queryString) {
	        $.ajax({
	            url: addQuery(loginUri, queryString),
	            type: 'POST',
	            dataType: 'application/json',
	            success: function (data) {
	                e.source.postMessage('loggedOut:' + ((data.ok == 1) ? 'ok' : 'failure'), e.origin);
	            },
	            error: function (msg) { alert('Error: ' + msg) }
	        })
	    }
    </script>
	</body>
</html>