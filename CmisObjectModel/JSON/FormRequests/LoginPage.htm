<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!--
'* Project: CmisObjectModelLibrary
'* Copyright (c) 2014, Brügmann Software GmbH, Papenburg, All rights reserved
'*
'* Contact: opensource<at>patorg.de
'* 
'* CmisObjectModelLibrary is a VB.NET implementation of the Content Management Interoperability Services (CMIS) standard
'*
'* This file is part of CmisObjectModelLibrary.
'* 
'* This library is free software; you can redistribute it and/or
'* modify it under the terms of the GNU Lesser General Public
'* License as published by the Free Software Foundation; either
'* version 3.0 of the License, or (at your option) any later version.
'*
'* This library is distributed in the hope that it will be useful,
'* but WITHOUT ANY WARRANTY; without even the implied warranty of
'* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
'* Lesser General Public License for more details.
'*
'* You should have received a copy of the GNU Lesser General Public
'* License along with this library (lgpl.txt).
'* If not, see <http://www.gnu.org/licenses/lgpl.txt>.
-->
<html>
	<head>
		<title>Login</title>
	</head>
	<body>
	    <h1>CmisObjectModel Repository Login</h1>
        <div>
            <p>Please provide your credentials for this CMIS repository.</p>
        </div>
        <div>
            <form name="main" method="post" action="">
                <table>
			        <tr>
				        <td>Username:</td>
				        <td><input type="text" name="user" size="20" /></td>
			        </tr>
			        <tr>
				        <td>Password:</td>
				        <td><input type="password" name="password" size="20" /></td>
			        </tr>
                    <tr>
                        <td>RepositoryId:</td>
                        <td><input type="text" name="repositoryId" size="20" /></td>
                    </tr>
			        <tr>
				        <td></td>
				        <td><input type="checkbox" name="trustapp" checked="checked"/>
				            I'm trusting this application:<br/>
				            <span style="font-weight: bold">820972d652e34dfc8b730fd64dc1ca74</span>
				        </td>
			        </tr>
			        <tr>
				        <td></td>
				        <td><input type="submit" value="Login" /> <input type="button" value="Cancel" onclick="window.history.back()" /></td>
			        </tr>
		        </table>
                <input type="hidden" name="authorization" />
                <input type="hidden" name="cmisaction" value="login" />
            </form>
        </div>
        <script charset="utf-8" language="javascript" type="text/javascript">
            (function () {

                var object = typeof exports != 'undefined' ? exports : this; // #8: web workers 
                var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

                function InvalidCharacterError(message) {
                    this.message = message;
                }
                InvalidCharacterError.prototype = new Error;
                InvalidCharacterError.prototype.name = 'InvalidCharacterError';

                // encoder 
                // [https://gist.github.com/999166] by [https://github.com/nignag] 
                object.btoa || (
                object.btoa = function (input) {
                    var str = String(input);
                    for (
                    // initialize result and counter 
                    var block, charCode, idx = 0, map = chars, output = '';
                    // if the next str index does not exist: 
                    //   change the mapping table to "=" 
                    //   check if d has no fractional digits 
                    str.charAt(idx | 0) || (map = '=', idx % 1);
                    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8 
                    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
                    ) {
                        charCode = str.charCodeAt(idx += 3 / 4);
                        if (charCode > 0xFF) {
                            throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
                        }
                        block = block << 8 | charCode;
                    }
                    return output;
                });

                // decoder 
                // [https://gist.github.com/1020396] by [https://github.com/atk] 
                object.atob || (
                object.atob = function (input) {
                    var str = String(input).replace(/=+$/, '');
                    if (str.length % 4 == 1) {
                        throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
                    }
                    for (
                    // initialize result and counters 
                    var bc = 0, bs, buffer, idx = 0, output = '';
                    // get next character 
                    buffer = str.charAt(idx++);
                    // character found in table? initialize bit storage and add its ascii value; 
                    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
                    // and if not first of each 4 characters, 
                    // convert the first 8 bits to one ascii character 
                        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
                    ) {
                        // try to find character in table (0-63, not found => -1) 
                        buffer = chars.indexOf(buffer);
                    }
                    return output;
                });

            } ());
            window.onsubmit = function () {
                document.forms[0].authorization.value = "Basic " + btoa(document.forms[0].user.value + ":" + document.forms[0].password.value);
                document.forms[0].password.value = null;
            }
        </script>
	</body>
</html>