using ccdp = CmisObjectModel.Core.Definitions.Properties;
/* TODO ERROR: Skipped EndIfDirectiveTrivia
#End If
*/
namespace CmisObjectModel.Core.Definitions.Properties
{
    [Attributes.JavaScriptConverter(typeof(JSON.Core.Definitions.Properties.cmisPropertyIntegerDefinitionTypeConverter))]
    public partial class cmisPropertyIntegerDefinitionType
    {
    }
}

namespace CmisObjectModel.JSON.Core.Definitions.Properties
{
    [Attributes.AutoGenerated()]
    public partial class cmisPropertyIntegerDefinitionTypeConverter : Generic.cmisPropertyDefinitionTypeConverter<long, CmisObjectModel.Core.Choices.cmisChoiceInteger, CmisObjectModel.Core.Properties.cmisPropertyInteger, ccdp.cmisPropertyIntegerDefinitionType>
    {

        #region Constructors
        public cmisPropertyIntegerDefinitionTypeConverter() : base(new Serialization.Generic.DefaultObjectResolver<ccdp.cmisPropertyDefinitionType, ccdp.cmisPropertyIntegerDefinitionType>())
        {
        }
        public cmisPropertyIntegerDefinitionTypeConverter(Serialization.Generic.ObjectResolver<ccdp.cmisPropertyDefinitionType> objectResolver) : base(objectResolver)
        {
        }
        #endregion

        protected override void Deserialize(SerializationContext context)
        {
            base.Deserialize(context);
            context.Object.MinValue = ReadNullable(context.Dictionary, "minValue", context.Object.MinValue);
            context.Object.MaxValue = ReadNullable(context.Dictionary, "maxValue", context.Object.MaxValue);
        }

        protected override void Serialize(SerializationContext context)
        {
            base.Serialize(context);
            if (context.Object.MinValue.HasValue)
                context.Add("minValue", context.Object.MinValue.Value);
            if (context.Object.MaxValue.HasValue)
                context.Add("maxValue", context.Object.MaxValue.Value);
        }
    }
}