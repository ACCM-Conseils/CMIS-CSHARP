
/* TODO ERROR: Skipped EndIfDirectiveTrivia
#End If
*/
namespace CmisObjectModel.Core
{
    [Attributes.JavaScriptConverter(typeof(JSON.Core.cmisAllowableActionsTypeConverter))]
    public partial class cmisAllowableActionsType
    {
    }
}

namespace CmisObjectModel.JSON.Core
{
    [Attributes.AutoGenerated()]
    public partial class cmisAllowableActionsTypeConverter : Serialization.Generic.JavaScriptConverter<CmisObjectModel.Core.cmisAllowableActionsType>
    {

        #region Constructors
        public cmisAllowableActionsTypeConverter() : base(new Serialization.Generic.DefaultObjectResolver<CmisObjectModel.Core.cmisAllowableActionsType>())
        {
        }
        public cmisAllowableActionsTypeConverter(Serialization.Generic.ObjectResolver<CmisObjectModel.Core.cmisAllowableActionsType> objectResolver) : base(objectResolver)
        {
        }
        #endregion

        protected override void Deserialize(SerializationContext context)
        {
            context.Object.CanDeleteObject = ReadNullable(context.Dictionary, "canDeleteObject", context.Object.CanDeleteObject);
            context.Object.CanUpdateProperties = ReadNullable(context.Dictionary, "canUpdateProperties", context.Object.CanUpdateProperties);
            context.Object.CanGetFolderTree = ReadNullable(context.Dictionary, "canGetFolderTree", context.Object.CanGetFolderTree);
            context.Object.CanGetProperties = ReadNullable(context.Dictionary, "canGetProperties", context.Object.CanGetProperties);
            context.Object.CanGetObjectRelationships = ReadNullable(context.Dictionary, "canGetObjectRelationships", context.Object.CanGetObjectRelationships);
            context.Object.CanGetObjectParents = ReadNullable(context.Dictionary, "canGetObjectParents", context.Object.CanGetObjectParents);
            context.Object.CanGetFolderParent = ReadNullable(context.Dictionary, "canGetFolderParent", context.Object.CanGetFolderParent);
            context.Object.CanGetDescendants = ReadNullable(context.Dictionary, "canGetDescendants", context.Object.CanGetDescendants);
            context.Object.CanMoveObject = ReadNullable(context.Dictionary, "canMoveObject", context.Object.CanMoveObject);
            context.Object.CanDeleteContentStream = ReadNullable(context.Dictionary, "canDeleteContentStream", context.Object.CanDeleteContentStream);
            context.Object.CanCheckOut = ReadNullable(context.Dictionary, "canCheckOut", context.Object.CanCheckOut);
            context.Object.CanCancelCheckOut = ReadNullable(context.Dictionary, "canCancelCheckOut", context.Object.CanCancelCheckOut);
            context.Object.CanCheckIn = ReadNullable(context.Dictionary, "canCheckIn", context.Object.CanCheckIn);
            context.Object.CanSetContentStream = ReadNullable(context.Dictionary, "canSetContentStream", context.Object.CanSetContentStream);
            context.Object.CanGetAllVersions = ReadNullable(context.Dictionary, "canGetAllVersions", context.Object.CanGetAllVersions);
            context.Object.CanAddObjectToFolder = ReadNullable(context.Dictionary, "canAddObjectToFolder", context.Object.CanAddObjectToFolder);
            context.Object.CanRemoveObjectFromFolder = ReadNullable(context.Dictionary, "canRemoveObjectFromFolder", context.Object.CanRemoveObjectFromFolder);
            context.Object.CanGetContentStream = ReadNullable(context.Dictionary, "canGetContentStream", context.Object.CanGetContentStream);
            context.Object.CanApplyPolicy = ReadNullable(context.Dictionary, "canApplyPolicy", context.Object.CanApplyPolicy);
            context.Object.CanGetAppliedPolicies = ReadNullable(context.Dictionary, "canGetAppliedPolicies", context.Object.CanGetAppliedPolicies);
            context.Object.CanRemovePolicy = ReadNullable(context.Dictionary, "canRemovePolicy", context.Object.CanRemovePolicy);
            context.Object.CanGetChildren = ReadNullable(context.Dictionary, "canGetChildren", context.Object.CanGetChildren);
            context.Object.CanCreateDocument = ReadNullable(context.Dictionary, "canCreateDocument", context.Object.CanCreateDocument);
            context.Object.CanCreateFolder = ReadNullable(context.Dictionary, "canCreateFolder", context.Object.CanCreateFolder);
            context.Object.CanCreateRelationship = ReadNullable(context.Dictionary, "canCreateRelationship", context.Object.CanCreateRelationship);
            context.Object.CanDeleteTree = ReadNullable(context.Dictionary, "canDeleteTree", context.Object.CanDeleteTree);
            context.Object.CanGetRenditions = ReadNullable(context.Dictionary, "canGetRenditions", context.Object.CanGetRenditions);
            context.Object.CanGetACL = ReadNullable(context.Dictionary, "canGetACL", context.Object.CanGetACL);
            context.Object.CanApplyACL = ReadNullable(context.Dictionary, "canApplyACL", context.Object.CanApplyACL);
        }

        protected override void Serialize(SerializationContext context)
        {
            if (context.Object.CanDeleteObject.HasValue)
                context.Add("canDeleteObject", context.Object.CanDeleteObject.Value);
            if (context.Object.CanUpdateProperties.HasValue)
                context.Add("canUpdateProperties", context.Object.CanUpdateProperties.Value);
            if (context.Object.CanGetFolderTree.HasValue)
                context.Add("canGetFolderTree", context.Object.CanGetFolderTree.Value);
            if (context.Object.CanGetProperties.HasValue)
                context.Add("canGetProperties", context.Object.CanGetProperties.Value);
            if (context.Object.CanGetObjectRelationships.HasValue)
                context.Add("canGetObjectRelationships", context.Object.CanGetObjectRelationships.Value);
            if (context.Object.CanGetObjectParents.HasValue)
                context.Add("canGetObjectParents", context.Object.CanGetObjectParents.Value);
            if (context.Object.CanGetFolderParent.HasValue)
                context.Add("canGetFolderParent", context.Object.CanGetFolderParent.Value);
            if (context.Object.CanGetDescendants.HasValue)
                context.Add("canGetDescendants", context.Object.CanGetDescendants.Value);
            if (context.Object.CanMoveObject.HasValue)
                context.Add("canMoveObject", context.Object.CanMoveObject.Value);
            if (context.Object.CanDeleteContentStream.HasValue)
                context.Add("canDeleteContentStream", context.Object.CanDeleteContentStream.Value);
            if (context.Object.CanCheckOut.HasValue)
                context.Add("canCheckOut", context.Object.CanCheckOut.Value);
            if (context.Object.CanCancelCheckOut.HasValue)
                context.Add("canCancelCheckOut", context.Object.CanCancelCheckOut.Value);
            if (context.Object.CanCheckIn.HasValue)
                context.Add("canCheckIn", context.Object.CanCheckIn.Value);
            if (context.Object.CanSetContentStream.HasValue)
                context.Add("canSetContentStream", context.Object.CanSetContentStream.Value);
            if (context.Object.CanGetAllVersions.HasValue)
                context.Add("canGetAllVersions", context.Object.CanGetAllVersions.Value);
            if (context.Object.CanAddObjectToFolder.HasValue)
                context.Add("canAddObjectToFolder", context.Object.CanAddObjectToFolder.Value);
            if (context.Object.CanRemoveObjectFromFolder.HasValue)
                context.Add("canRemoveObjectFromFolder", context.Object.CanRemoveObjectFromFolder.Value);
            if (context.Object.CanGetContentStream.HasValue)
                context.Add("canGetContentStream", context.Object.CanGetContentStream.Value);
            if (context.Object.CanApplyPolicy.HasValue)
                context.Add("canApplyPolicy", context.Object.CanApplyPolicy.Value);
            if (context.Object.CanGetAppliedPolicies.HasValue)
                context.Add("canGetAppliedPolicies", context.Object.CanGetAppliedPolicies.Value);
            if (context.Object.CanRemovePolicy.HasValue)
                context.Add("canRemovePolicy", context.Object.CanRemovePolicy.Value);
            if (context.Object.CanGetChildren.HasValue)
                context.Add("canGetChildren", context.Object.CanGetChildren.Value);
            if (context.Object.CanCreateDocument.HasValue)
                context.Add("canCreateDocument", context.Object.CanCreateDocument.Value);
            if (context.Object.CanCreateFolder.HasValue)
                context.Add("canCreateFolder", context.Object.CanCreateFolder.Value);
            if (context.Object.CanCreateRelationship.HasValue)
                context.Add("canCreateRelationship", context.Object.CanCreateRelationship.Value);
            if (context.Object.CanDeleteTree.HasValue)
                context.Add("canDeleteTree", context.Object.CanDeleteTree.Value);
            if (context.Object.CanGetRenditions.HasValue)
                context.Add("canGetRenditions", context.Object.CanGetRenditions.Value);
            if (context.Object.CanGetACL.HasValue)
                context.Add("canGetACL", context.Object.CanGetACL.Value);
            if (context.Object.CanApplyACL.HasValue)
                context.Add("canApplyACL", context.Object.CanApplyACL.Value);
        }
    }
}