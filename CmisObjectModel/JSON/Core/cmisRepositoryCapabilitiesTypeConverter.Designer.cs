
// ***********************************************************************************************************************
// * Project: CmisObjectModelLibrary
// * Copyright (c) 2014, Brügmann Software GmbH, Papenburg, All rights reserved
// * Author: BSW_BER
// * Contact: opensource<at>patorg.de
// * 
// * CmisObjectModelLibrary is a VB.NET implementation of the Content Management Interoperability Services (CMIS) standard
// *
// * This file is part of CmisObjectModelLibrary.
// * 
// * This library is free software; you can redistribute it and/or
// * modify it under the terms of the GNU Lesser General Public
// * License as published by the Free Software Foundation; either
// * version 3.0 of the License, or (at your option) any later version.
// *
// * This library is distributed in the hope that it will be useful,
// * but WITHOUT ANY WARRANTY; without even the implied warranty of
// * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// * Lesser General Public License for more details.
// *
// * You should have received a copy of the GNU Lesser General Public
// * License along with this library (lgpl.txt).
// * If not, see <http://www.gnu.org/licenses/lgpl.txt>.
// ***********************************************************************************************************************
using CmisObjectModel.Common;
/* TODO ERROR: Skipped EndIfDirectiveTrivia
#End If
*/
namespace CmisObjectModel.Core
{
    [Attributes.JavaScriptConverter(typeof(JSON.Core.cmisRepositoryCapabilitiesTypeConverter))]
    public partial class cmisRepositoryCapabilitiesType
    {
    }
}

namespace CmisObjectModel.JSON.Core
{
    [Attributes.AutoGenerated()]
    public partial class cmisRepositoryCapabilitiesTypeConverter : Serialization.Generic.JavaScriptConverter<CmisObjectModel.Core.cmisRepositoryCapabilitiesType>
    {

        #region Constructors
        public cmisRepositoryCapabilitiesTypeConverter() : base(new Serialization.Generic.DefaultObjectResolver<CmisObjectModel.Core.cmisRepositoryCapabilitiesType>())
        {
        }
        public cmisRepositoryCapabilitiesTypeConverter(Serialization.Generic.ObjectResolver<CmisObjectModel.Core.cmisRepositoryCapabilitiesType> objectResolver) : base(objectResolver)
        {
        }
        #endregion

        protected override void Deserialize(SerializationContext context)
        {
            context.Object.CapabilityAllVersionsSearchable = Read(context.Dictionary, "capabilityAllVersionsSearchable", context.Object.CapabilityAllVersionsSearchable);
            context.Object.CapabilityGetDescendants = Read(context.Dictionary, "capabilityGetDescendants", context.Object.CapabilityGetDescendants);
            context.Object.CapabilityGetFolderTree = Read(context.Dictionary, "capabilityGetFolderTree", context.Object.CapabilityGetFolderTree);
            context.Object.CapabilityMultifiling = Read(context.Dictionary, "capabilityMultifiling", context.Object.CapabilityMultifiling);
            context.Object.CapabilityPWCSearchable = Read(context.Dictionary, "capabilityPWCSearchable", context.Object.CapabilityPWCSearchable);
            context.Object.CapabilityPWCUpdatable = Read(context.Dictionary, "capabilityPWCUpdatable", context.Object.CapabilityPWCUpdatable);
            context.Object.CapabilityUnfiling = Read(context.Dictionary, "capabilityUnfiling", context.Object.CapabilityUnfiling);
            context.Object.CapabilityVersionSpecificFiling = Read(context.Dictionary, "capabilityVersionSpecificFiling", context.Object.CapabilityVersionSpecificFiling);
            context.Object.CapabilityCreatablePropertyTypes = Read(context, "capabilityCreatablePropertyTypes", context.Object.CapabilityCreatablePropertyTypes);
            context.Object.CapabilityNewTypeSettableAttributes = Read(context, "capabilityNewTypeSettableAttributes", context.Object.CapabilityNewTypeSettableAttributes);
            context.Object.CapabilityACL = ReadEnum(context.Dictionary, "capabilityACL", context.Object.CapabilityACL);
            context.Object.CapabilityChanges = ReadEnum(context.Dictionary, "capabilityChanges", context.Object.CapabilityChanges);
            context.Object.CapabilityContentStreamUpdatability = ReadEnum(context.Dictionary, "capabilityContentStreamUpdatability", context.Object.CapabilityContentStreamUpdatability);
            context.Object.CapabilityOrderBy = ReadEnum(context.Dictionary, "capabilityOrderBy", context.Object.CapabilityOrderBy);
            context.Object.CapabilityQuery = ReadEnum(context.Dictionary, "capabilityQuery", context.Object.CapabilityQuery);
            context.Object.CapabilityRenditions = ReadEnum(context.Dictionary, "capabilityRenditions", context.Object.CapabilityRenditions);
            context.Object.CapabilityJoin = ReadEnum(context.Dictionary, "capabilityJoin", context.Object.CapabilityJoin);
        }

        protected override void Serialize(SerializationContext context)
        {
            context.Add("capabilityAllVersionsSearchable", context.Object.CapabilityAllVersionsSearchable);
            context.Add("capabilityGetDescendants", context.Object.CapabilityGetDescendants);
            context.Add("capabilityGetFolderTree", context.Object.CapabilityGetFolderTree);
            context.Add("capabilityMultifiling", context.Object.CapabilityMultifiling);
            context.Add("capabilityPWCSearchable", context.Object.CapabilityPWCSearchable);
            context.Add("capabilityPWCUpdatable", context.Object.CapabilityPWCUpdatable);
            context.Add("capabilityUnfiling", context.Object.CapabilityUnfiling);
            context.Add("capabilityVersionSpecificFiling", context.Object.CapabilityVersionSpecificFiling);
            Write(context, context.Object.CapabilityCreatablePropertyTypes, "capabilityCreatablePropertyTypes");
            Write(context, context.Object.CapabilityNewTypeSettableAttributes, "capabilityNewTypeSettableAttributes");
            context.Add("capabilityACL", context.Object.CapabilityACL.GetName());
            context.Add("capabilityChanges", context.Object.CapabilityChanges.GetName());
            context.Add("capabilityContentStreamUpdatability", context.Object.CapabilityContentStreamUpdatability.GetName());
            context.Add("capabilityOrderBy", context.Object.CapabilityOrderBy.GetName());
            context.Add("capabilityQuery", context.Object.CapabilityQuery.GetName());
            context.Add("capabilityRenditions", context.Object.CapabilityRenditions.GetName());
            context.Add("capabilityJoin", context.Object.CapabilityJoin.GetName());
        }
    }
}