
/* TODO ERROR: Skipped EndIfDirectiveTrivia
#End If
*/
namespace CmisObjectModel.Core
{
    [Attributes.JavaScriptConverter(typeof(JSON.Core.cmisRepositoryInfoTypeConverter))]
    public partial class cmisRepositoryInfoType
    {
    }
}

namespace CmisObjectModel.JSON.Core
{
    [Attributes.AutoGenerated()]
    public partial class cmisRepositoryInfoTypeConverter : Serialization.Generic.JavaScriptConverter<CmisObjectModel.Core.cmisRepositoryInfoType>
    {

        #region Constructors
        public cmisRepositoryInfoTypeConverter() : base(new Serialization.Generic.DefaultObjectResolver<CmisObjectModel.Core.cmisRepositoryInfoType>())
        {
        }
        public cmisRepositoryInfoTypeConverter(Serialization.Generic.ObjectResolver<CmisObjectModel.Core.cmisRepositoryInfoType> objectResolver) : base(objectResolver)
        {
        }
        #endregion

        protected override void Deserialize(SerializationContext context)
        {
            context.Object.RepositoryId = Read(context.Dictionary, "repositoryId", context.Object.RepositoryId);
            context.Object.RepositoryName = Read(context.Dictionary, "repositoryName", context.Object.RepositoryName);
            context.Object.RepositoryDescription = Read(context.Dictionary, "repositoryDescription", context.Object.RepositoryDescription);
            context.Object.VendorName = Read(context.Dictionary, "vendorName", context.Object.VendorName);
            context.Object.ProductName = Read(context.Dictionary, "productName", context.Object.ProductName);
            context.Object.ProductVersion = Read(context.Dictionary, "productVersion", context.Object.ProductVersion);
            context.Object.RepositoryUrl = Read(context.Dictionary, "repositoryUrl", context.Object.RepositoryUrl);
            context.Object.RootFolderId = Read(context.Dictionary, "rootFolderId", context.Object.RootFolderId);
            context.Object.RootFolderUrl = Read(context.Dictionary, "rootFolderUrl", context.Object.RootFolderUrl);
            context.Object.CmisVersionSupported = Read(context.Dictionary, "cmisVersionSupported", context.Object.CmisVersionSupported);
            context.Object.LatestChangeLogToken = Read(context.Dictionary, "latestChangeLogToken", context.Object.LatestChangeLogToken);
            context.Object.ThinClientURI = Read(context.Dictionary, "thinClientURI", context.Object.ThinClientURI);
            context.Object.ChangesIncomplete = ReadNullable(context.Dictionary, "changesIncomplete", context.Object.ChangesIncomplete);
            context.Object.PrincipalIdAnonymous = Read(context.Dictionary, "principalIdAnonymous", context.Object.PrincipalIdAnonymous);
            context.Object.PrincipalIdAnyone = Read(context.Dictionary, "principalIdAnyone", context.Object.PrincipalIdAnyone);
            context.Object.Capabilities = Read(context, "capabilities", context.Object.Capabilities);
            context.Object.AclCapabilities = Read(context, "aclCapabilities", context.Object.AclCapabilities);
            context.Object.ExtendedFeatures = ReadArray(context, "extendedFeatures", context.Object.ExtendedFeatures);
            context.Object.ChangesOnTypes = ReadEnumArray(context.Dictionary, "changesOnType", context.Object.ChangesOnTypes);
        }

        protected override void Serialize(SerializationContext context)
        {
            context.Add("repositoryId", context.Object.RepositoryId);
            context.Add("repositoryName", context.Object.RepositoryName);
            context.Add("repositoryDescription", context.Object.RepositoryDescription);
            context.Add("vendorName", context.Object.VendorName);
            context.Add("productName", context.Object.ProductName);
            context.Add("productVersion", context.Object.ProductVersion);
            context.Add("repositoryUrl", context.Object.RepositoryUrl);
            context.Add("rootFolderId", context.Object.RootFolderId);
            context.Add("rootFolderUrl", context.Object.RootFolderUrl);
            context.Add("cmisVersionSupported", context.Object.CmisVersionSupported);
            if (!string.IsNullOrEmpty(context.Object.LatestChangeLogToken))
                context.Add("latestChangeLogToken", context.Object.LatestChangeLogToken);
            if (!string.IsNullOrEmpty(context.Object.ThinClientURI))
                context.Add("thinClientURI", context.Object.ThinClientURI);
            if (context.Object.ChangesIncomplete.HasValue)
                context.Add("changesIncomplete", context.Object.ChangesIncomplete.Value);
            if (!string.IsNullOrEmpty(context.Object.PrincipalIdAnonymous))
                context.Add("principalIdAnonymous", context.Object.PrincipalIdAnonymous);
            if (!string.IsNullOrEmpty(context.Object.PrincipalIdAnyone))
                context.Add("principalIdAnyone", context.Object.PrincipalIdAnyone);
            Write(context, context.Object.Capabilities, "capabilities");
            Write(context, context.Object.AclCapabilities, "aclCapabilities");
            WriteArray(context, context.Object.ExtendedFeatures, "extendedFeatures");
            WriteArray(context, context.Object.ChangesOnTypes, "changesOnType");
        }
    }
}